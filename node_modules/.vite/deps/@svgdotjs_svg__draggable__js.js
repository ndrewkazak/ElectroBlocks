import {
  Box,
  Element,
  G,
  extend,
  off,
  on
} from "./chunk-PQU4UC4C.js";
import "./chunk-LNEMQRCO.js";

// node_modules/@svgdotjs/svg.draggable.js/dist/svg.draggable.esm.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
var getCoordsFromEvent = function getCoordsFromEvent2(ev) {
  if (ev.changedTouches) {
    ev = ev.changedTouches[0];
  }
  return {
    x: ev.clientX,
    y: ev.clientY
  };
};
var DragHandler = function() {
  function DragHandler2(el) {
    _classCallCheck(this, DragHandler2);
    el.remember("_draggable", this);
    this.el = el;
    this.drag = this.drag.bind(this);
    this.startDrag = this.startDrag.bind(this);
    this.endDrag = this.endDrag.bind(this);
  }
  _createClass(DragHandler2, [{
    key: "init",
    value: function init(enabled) {
      if (enabled) {
        this.el.on("mousedown.drag", this.startDrag);
        this.el.on("touchstart.drag", this.startDrag, {
          passive: false
        });
      } else {
        this.el.off("mousedown.drag");
        this.el.off("touchstart.drag");
      }
    }
    // Start dragging
  }, {
    key: "startDrag",
    value: function startDrag(ev) {
      var isMouse = !ev.type.indexOf("mouse");
      if (isMouse && ev.which !== 1 && ev.buttons !== 0) {
        return;
      }
      if (this.el.dispatch("beforedrag", {
        event: ev,
        handler: this
      }).defaultPrevented) {
        return;
      }
      ev.preventDefault();
      ev.stopPropagation();
      this.init(false);
      this.box = this.el.bbox();
      this.lastClick = this.el.point(getCoordsFromEvent(ev));
      var eventMove = (isMouse ? "mousemove" : "touchmove") + ".drag";
      var eventEnd = (isMouse ? "mouseup" : "touchend") + ".drag";
      on(window, eventMove, this.drag, this, {
        passive: false
      });
      on(window, eventEnd, this.endDrag, this, {
        passive: false
      });
      this.el.fire("dragstart", {
        event: ev,
        handler: this,
        box: this.box
      });
    }
    // While dragging
  }, {
    key: "drag",
    value: function drag(ev) {
      var box = this.box, lastClick = this.lastClick;
      var currentClick = this.el.point(getCoordsFromEvent(ev));
      var dx = currentClick.x - lastClick.x;
      var dy = currentClick.y - lastClick.y;
      if (!dx && !dy)
        return box;
      var x = box.x + dx;
      var y = box.y + dy;
      this.box = new Box(x, y, box.w, box.h);
      this.lastClick = currentClick;
      if (this.el.dispatch("dragmove", {
        event: ev,
        handler: this,
        box: this.box
      }).defaultPrevented) {
        return;
      }
      this.move(x, y);
    }
  }, {
    key: "move",
    value: function move(x, y) {
      if (this.el.type === "svg") {
        G.prototype.move.call(this.el, x, y);
      } else {
        this.el.move(x, y);
      }
    }
  }, {
    key: "endDrag",
    value: function endDrag(ev) {
      this.drag(ev);
      this.el.fire("dragend", {
        event: ev,
        handler: this,
        box: this.box
      });
      off(window, "mousemove.drag");
      off(window, "touchmove.drag");
      off(window, "mouseup.drag");
      off(window, "touchend.drag");
      this.init(true);
    }
  }]);
  return DragHandler2;
}();
extend(Element, {
  draggable: function draggable() {
    var enable = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    var dragHandler = this.remember("_draggable") || new DragHandler(this);
    dragHandler.init(enable);
    return this;
  }
});
/*! Bundled license information:

@svgdotjs/svg.draggable.js/dist/svg.draggable.esm.js:
  (*!
  * @svgdotjs/svg.draggable.js - An extension for svg.js which allows to drag elements with your mouse
  * @version 3.0.3
  * https://github.com/svgdotjs/svg.draggable.js
  *
  * @copyright Wout Fierens
  * @license MIT
  *
  * BUILT: Mon Mar 20 2023 18:56:35 GMT+0100 (Central European Standard Time)
  *)
*/
//# sourceMappingURL=@svgdotjs_svg__draggable__js.js.map
