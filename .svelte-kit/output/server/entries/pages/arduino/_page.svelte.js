import { c as create_ssr_component, d as each, e as escape, b as add_attribute, v as validate_component } from "../../../chunks/ssr.js";
import { V as VerticalComponentContainer } from "../../../chunks/VerticalComponentContainer.js";
import { P as PortState, a as arduinoStore, b as arduionMessageStore, h as rgbToHex } from "../../../chunks/Blockly.svelte_svelte_type_style_lang.js";
import { c as codeStore } from "../../../chunks/code.store.js";
import "../../../chunks/arduino-component-id.js";
import "sweetalert";
const css$2 = {
  code: "#debug.svelte-1uy08jn.svelte-1uy08jn{width:100%;height:100%}h3.svelte-1uy08jn.svelte-1uy08jn{margin:0;padding:10px;font-size:20px}h3.svelte-1uy08jn span.svelte-1uy08jn{margin-right:10px;float:right}.fa.svelte-1uy08jn.svelte-1uy08jn{margin:0 10px;cursor:pointer}.fa-play.svelte-1uy08jn.svelte-1uy08jn{color:#23922b}.fa-stop.svelte-1uy08jn.svelte-1uy08jn{color:#aa0000}.fa.fa-bug.svelte-1uy08jn.svelte-1uy08jn{cursor:inherit}.not-active.svelte-1uy08jn.svelte-1uy08jn{color:gray !important;pointer-events:none;cursor:not-allowed}#variable-table-container.svelte-1uy08jn.svelte-1uy08jn{overflow:scroll;margin-bottom:10px}#variable-table.svelte-1uy08jn.svelte-1uy08jn{border-collapse:collapse;width:100%;font-weight:600}#variable-table.svelte-1uy08jn td.svelte-1uy08jn,#variable-table.svelte-1uy08jn th.svelte-1uy08jn{border:1px solid #ddd;padding:8px;background-color:white}#variable-table.svelte-1uy08jn tr.svelte-1uy08jn:nth-child(even){background-color:#f2f2f2}#variable-table.svelte-1uy08jn tr.svelte-1uy08jn:hover{background-color:#ddd}#variable-table.svelte-1uy08jn th.svelte-1uy08jn{padding-top:12px;padding-bottom:12px;text-align:left;background-color:#505bda;color:white}.colorValue.svelte-1uy08jn.svelte-1uy08jn{color:white}.coloredElement.svelte-1uy08jn.svelte-1uy08jn{margin-left:10px;padding:0 7px}.colorValue.svelte-1uy08jn .coloredElement.svelte-1uy08jn:first-of-type{margin-left:0}.debug-start.svelte-1uy08jn.svelte-1uy08jn{font-size:18px;color:#23922b}",
  map: `{"version":3,"file":"Debug.svelte","sources":["Debug.svelte"],"sourcesContent":["<script>\\n  import arduinoStore, { PortState } from \\"../../../stores/arduino.store\\";\\n  import arduionMessageStore from \\"../../../stores/arduino-message.store\\";\\n  import { rgbToHex } from \\"../../../core/blockly/helpers/color.helper\\";\\n\\n  // This is the variable list used to print all the variables\\n  let variables = [];\\n\\n  // we temporarily store variables here until all our complete\\n  let tempVariables = [];\\n\\n  // state of the arduino\\n  let portStatus = PortState.CLOSE;\\n\\n  // This is means that the arduino is in the debug mode and can recieve a continue or stop message\\n  let inDebugStatement = false;\\n\\n  // If true it means that debugging can start\\n  let debugStart = false;\\n\\n  arduinoStore.subscribe((newPortStatus) => {\\n    portStatus = newPortStatus;\\n    if (portStatus === PortState.CLOSE) {\\n      debugStart = false;\\n    }\\n  });\\n\\n  arduionMessageStore.subscribe((message) => {\\n    if (!message) {\\n      return;\\n    }\\n\\n    if (message.message.includes(\\"START_DEBUG\\")) {\\n      debugStart = true;\\n    }\\n\\n    if (message.type === \\"Computer\\") {\\n      return;\\n    }\\n\\n    if (message.message.includes(\\"DEBUG_BLOCK_\\")) {\\n      variables = [...tempVariables];\\n      tempVariables = [];\\n      inDebugStatement = true;\\n      return;\\n    }\\n\\n    if (!message.message.includes(\\"**(|)\\")) {\\n      return;\\n    }\\n\\n    const [name, type, value] = message.message\\n      .replace(\\"**(|)\\", \\"\\")\\n      .split(\\"_|_\\");\\n\\n    const varIndex = tempVariables.findIndex((v) => v.name === name);\\n    if (varIndex > -1) {\\n      tempVariables[varIndex] = { name, type, value };\\n      return;\\n    }\\n    tempVariables.push({ name, type, value });\\n  });\\n\\n  function colorValueString(colorString) {\\n    const [red, green, blue] = colorString\\n      .replace(\\"{\\", \\"\\")\\n      .replace(\\"}\\", \\"\\")\\n      .split(\\"-\\")\\n      .map((colorNum) => parseInt(colorNum, 0));\\n    return \`(red=\${red},green=\${green},blue=\${blue})\`;\\n  }\\n\\n  function colorValueHex(colorString) {\\n    const [red, green, blue] = colorString\\n      .replace(\\"{\\", \\"\\")\\n      .replace(\\"}\\", \\"\\")\\n      .split(\\"-\\")\\n      .map((colorNum) => parseInt(colorNum, 0));\\n\\n    return rgbToHex({ red, green, blue });\\n  }\\n\\n  function parseColorList(colorListString) {\\n    return colorListString\\n      .replace(\\"[\\", \\"\\")\\n      .replace(\\"]\\", \\"\\")\\n      .split(\\",\\")\\n      .map((colorString) => {\\n        const [red, green, blue] = colorString\\n          .replace(\\"{\\", \\"\\")\\n          .replace(\\"}\\", \\"\\")\\n          .split(\\"-\\")\\n          .map((colorNum) => parseInt(colorNum, 0));\\n\\n        return {\\n          red,\\n          green,\\n          blue,\\n        };\\n      });\\n  }\\n\\n  $: disableDebugBtn = portStatus !== PortState.OPEN || !inDebugStatement;\\n\\n  function continueDebug() {\\n    if (inDebugStatement) {\\n      arduionMessageStore.sendMessage(\\"continue_debug\\");\\n      inDebugStatement = false;\\n    }\\n  }\\n\\n  function stopDebug() {\\n    if (inDebugStatement) {\\n      arduionMessageStore.sendMessage(\\"stop_debug\\");\\n      inDebugStatement = false;\\n    }\\n  }\\n<\/script>\\n\\n<div id=\\"debug\\">\\n  <h3>\\n    Debug\\n    <span>\\n      <i\\n        class=\\"fa fa-play\\"\\n        on:click={continueDebug}\\n        class:not-active={disableDebugBtn}\\n      />\\n      <i\\n        class=\\"fa fa-stop\\"\\n        on:click={stopDebug}\\n        class:not-active={disableDebugBtn}\\n      />\\n      <i class:debug-start={debugStart} class=\\"fa fa-bug\\" />\\n    </span>\\n  </h3>\\n  <div id=\\"variable-table-container\\">\\n    <table id=\\"variable-table\\">\\n      <thead>\\n        <tr>\\n          <th>Variable Name</th>\\n          <th>Data Type</th>\\n          <th>Value</th>\\n        </tr>\\n      </thead>\\n      <tbody id=\\"variable-tbody\\">\\n        {#each variables as variable (variable.id)}\\n          <tr class:coloredElement={variable.type === 'Colour'}>\\n            <td>{variable.name}</td>\\n            <td>{variable.type}</td>\\n            <td>\\n              {#if variable.type !== 'Colour' && variable.type !== 'List Colour'}\\n                {variable.value}\\n              {/if}\\n              {#if variable.type === 'Colour'}\\n                <span\\n                  style=\\"color: {colorValueHex(variable.value)}\\"\\n                  class=\\"coloredElement\\"\\n                >\\n                  {colorValueString(variable.value)}\\n                </span>\\n              {/if}\\n              {#if variable.type === 'List Colour'}\\n                <span class=\\"colorValue\\">\\n                  {#each parseColorList(variable.value) as colorValue, index}\\n                    <span\\n                      style=\\"background-color: {rgbToHex(colorValue)}\\"\\n                      class=\\"coloredElement\\"\\n                    >\\n                      {index + 1}\\n                    </span>\\n                  {/each}\\n                </span>\\n              {/if}\\n            </td>\\n          </tr>\\n        {/each}\\n      </tbody>\\n    </table>\\n  </div>\\n</div>\\n\\n<style>\\n  #debug {\\n    width: 100%;\\n    height: 100%;\\n  }\\n  /** Top Menu **/\\n  h3 {\\n    margin: 0;\\n    padding: 10px;\\n    font-size: 20px;\\n  }\\n  h3 span {\\n    margin-right: 10px;\\n    float: right;\\n  }\\n  .fa {\\n    margin: 0 10px;\\n    cursor: pointer;\\n  }\\n  .fa-play {\\n    color: #23922b;\\n  }\\n  .fa-stop {\\n    color: #aa0000;\\n  }\\n  .fa.fa-bug {\\n    cursor: inherit;\\n  }\\n  .not-active {\\n    color: gray !important;\\n    pointer-events: none;\\n    cursor: not-allowed;\\n  }\\n\\n  /** Debug Table */\\n  #variable-table-container {\\n    overflow: scroll;\\n    margin-bottom: 10px;\\n  }\\n\\n  #variable-table {\\n    border-collapse: collapse;\\n    width: 100%;\\n    font-weight: 600;\\n  }\\n\\n  #variable-table td,\\n  #variable-table th {\\n    border: 1px solid #ddd;\\n    padding: 8px;\\n    background-color: white;\\n  }\\n\\n  #variable-table tr:nth-child(even) {\\n    background-color: #f2f2f2;\\n  }\\n\\n  #variable-table tr:hover {\\n    background-color: #ddd;\\n  }\\n\\n  #variable-table th {\\n    padding-top: 12px;\\n    padding-bottom: 12px;\\n    text-align: left;\\n    background-color: #505bda;\\n    color: white;\\n  }\\n\\n  .colorValue {\\n    color: white;\\n  }\\n\\n  .coloredElement {\\n    margin-left: 10px;\\n    padding: 0 7px;\\n  }\\n  .colorValue .coloredElement:first-of-type {\\n    margin-left: 0;\\n  }\\n  .debug-start {\\n    font-size: 18px;\\n    color: #23922b;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAuLE,oCAAO,CACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IACV,CAEA,gCAAG,CACD,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IACb,CACA,iBAAE,CAAC,mBAAK,CACN,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,KACT,CACA,iCAAI,CACF,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,MAAM,CAAE,OACV,CACA,sCAAS,CACP,KAAK,CAAE,OACT,CACA,sCAAS,CACP,KAAK,CAAE,OACT,CACA,GAAG,qCAAQ,CACT,MAAM,CAAE,OACV,CACA,yCAAY,CACV,KAAK,CAAE,IAAI,CAAC,UAAU,CACtB,cAAc,CAAE,IAAI,CACpB,MAAM,CAAE,WACV,CAGA,uDAA0B,CACxB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,IACjB,CAEA,6CAAgB,CACd,eAAe,CAAE,QAAQ,CACzB,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,GACf,CAEA,8BAAe,CAAC,iBAAE,CAClB,8BAAe,CAAC,iBAAG,CACjB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,KACpB,CAEA,8BAAe,CAAC,iBAAE,WAAW,IAAI,CAAE,CACjC,gBAAgB,CAAE,OACpB,CAEA,8BAAe,CAAC,iBAAE,MAAO,CACvB,gBAAgB,CAAE,IACpB,CAEA,8BAAe,CAAC,iBAAG,CACjB,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,KACT,CAEA,yCAAY,CACV,KAAK,CAAE,KACT,CAEA,6CAAgB,CACd,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,CAAC,CAAC,GACb,CACA,0BAAW,CAAC,8BAAe,cAAe,CACxC,WAAW,CAAE,CACf,CACA,0CAAa,CACX,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OACT"}`
};
function colorValueString(colorString) {
  const [red, green, blue] = colorString.replace("{", "").replace("}", "").split("-").map((colorNum) => parseInt(colorNum, 0));
  return `(red=${red},green=${green},blue=${blue})`;
}
function parseColorList(colorListString) {
  return colorListString.replace("[", "").replace("]", "").split(",").map((colorString) => {
    const [red, green, blue] = colorString.replace("{", "").replace("}", "").split("-").map((colorNum) => parseInt(colorNum, 0));
    return { red, green, blue };
  });
}
const Debug = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let disableDebugBtn;
  let variables = [];
  let tempVariables = [];
  let portStatus = PortState.CLOSE;
  let inDebugStatement = false;
  let debugStart = false;
  arduinoStore.subscribe((newPortStatus) => {
    portStatus = newPortStatus;
    if (portStatus === PortState.CLOSE) {
      debugStart = false;
    }
  });
  arduionMessageStore.subscribe((message) => {
    if (!message) {
      return;
    }
    if (message.message.includes("START_DEBUG")) {
      debugStart = true;
    }
    if (message.type === "Computer") {
      return;
    }
    if (message.message.includes("DEBUG_BLOCK_")) {
      variables = [...tempVariables];
      tempVariables = [];
      inDebugStatement = true;
      return;
    }
    if (!message.message.includes("**(|)")) {
      return;
    }
    const [name, type, value] = message.message.replace("**(|)", "").split("_|_");
    const varIndex = tempVariables.findIndex((v) => v.name === name);
    if (varIndex > -1) {
      tempVariables[varIndex] = { name, type, value };
      return;
    }
    tempVariables.push({ name, type, value });
  });
  function colorValueHex(colorString) {
    const [red, green, blue] = colorString.replace("{", "").replace("}", "").split("-").map((colorNum) => parseInt(colorNum, 0));
    return rgbToHex({ red, green, blue });
  }
  $$result.css.add(css$2);
  disableDebugBtn = portStatus !== PortState.OPEN || !inDebugStatement;
  return `<div id="debug" class="svelte-1uy08jn"><h3 class="svelte-1uy08jn">Debug
    <span class="svelte-1uy08jn"><i class="${["fa fa-play svelte-1uy08jn", disableDebugBtn ? "not-active" : ""].join(" ").trim()}"></i> <i class="${["fa fa-stop svelte-1uy08jn", disableDebugBtn ? "not-active" : ""].join(" ").trim()}"></i> <i class="${["fa fa-bug svelte-1uy08jn", debugStart ? "debug-start" : ""].join(" ").trim()}"></i></span></h3> <div id="variable-table-container" class="svelte-1uy08jn"><table id="variable-table" class="svelte-1uy08jn"><thead data-svelte-h="svelte-1kh807k"><tr class="svelte-1uy08jn"><th class="svelte-1uy08jn">Variable Name</th> <th class="svelte-1uy08jn">Data Type</th> <th class="svelte-1uy08jn">Value</th></tr></thead> <tbody id="variable-tbody">${each(variables, (variable) => {
    return `<tr class="${["svelte-1uy08jn", variable.type === "Colour" ? "coloredElement" : ""].join(" ").trim()}"><td class="svelte-1uy08jn">${escape(variable.name)}</td> <td class="svelte-1uy08jn">${escape(variable.type)}</td> <td class="svelte-1uy08jn">${variable.type !== "Colour" && variable.type !== "List Colour" ? `${escape(variable.value)}` : ``} ${variable.type === "Colour" ? `<span style="${"color: " + escape(colorValueHex(variable.value), true)}" class="coloredElement svelte-1uy08jn">${escape(colorValueString(variable.value))} </span>` : ``} ${variable.type === "List Colour" ? `<span class="colorValue svelte-1uy08jn">${each(parseColorList(variable.value), (colorValue, index) => {
      return `<span style="${"background-color: " + escape(rgbToHex(colorValue), true)}" class="coloredElement svelte-1uy08jn">${escape(index + 1)} </span>`;
    })} </span>` : ``}</td> </tr>`;
  })}</tbody></table></div> </div>`;
});
const css$1 = {
  code: "#messages.svelte-czu2g7.svelte-czu2g7{padding:10px;font-size:18px;overflow:scroll;height:calc(100% - 80px)}#messages.svelte-czu2g7 p img.svelte-czu2g7{vertical-align:middle}#send-message-container.svelte-czu2g7.svelte-czu2g7{display:flex;justify-content:space-between;width:98%;margin:auto;height:50px}#send-message-container.svelte-czu2g7 form.svelte-czu2g7{flex:4}#send-message-container.svelte-czu2g7 input.svelte-czu2g7{width:98%;margin:5px;outline:none;border:none;font-size:25px;height:40px;border-bottom:1px solid #505bda;transition:linear 1s border-bottom}#send-message-container.svelte-czu2g7 input.svelte-czu2g7:active,#send-message-container.svelte-czu2g7 input.svelte-czu2g7:focus{outline:none;border-bottom:2px solid #505bda}#send-message-container.svelte-czu2g7 input.svelte-czu2g7:read-only{cursor:not-allowed;color:#fff}button.svelte-czu2g7.svelte-czu2g7{margin:5px;border-radius:2px;font-size:20px;padding:5px 10px;width:50px;height:36px;margin-top:10px;cursor:pointer;color:black;background-color:rgb(254 244 255);border:none}button.svelte-czu2g7 i.svelte-czu2g7{transition:ease-in-out 0.4s font-size}button.svelte-czu2g7.svelte-czu2g7:focus,button.svelte-czu2g7.svelte-czu2g7:active{outline:none}button.svelte-czu2g7:active i.svelte-czu2g7{font-size:18px}button.svelte-czu2g7.svelte-czu2g7:disabled{cursor:not-allowed;background-color:rgb(255, 255, 255);color:#dce6de}button.svelte-czu2g7:disabled i.svelte-czu2g7{font-size:20px}.fa-eject.svelte-czu2g7.svelte-czu2g7{color:#eb423c}.fa-usb.svelte-czu2g7.svelte-czu2g7{color:#b063c5}button.svelte-czu2g7:not(:disabled) .fa-paper-plane.svelte-czu2g7{color:#16bb3a}.fa-trash.svelte-czu2g7.svelte-czu2g7{color:#16bb3a}.scroll-active.svelte-czu2g7.svelte-czu2g7{font-size:18px;color:#16bb3a}",
  map: '{"version":3,"file":"Message.svelte","sources":["Message.svelte"],"sourcesContent":["<script>\\n  import arduionMessageStore from \\"../../../stores/arduino-message.store\\";\\n  import codeStore from \\"../../../stores/code.store\\";\\n  import arduinoStore, { PortState } from \\"../../../stores/arduino.store\\";\\n\\n  import { upload } from \\"../../../core/serial/upload\\";\\n\\n  import { afterUpdate } from \\"svelte\\";\\n  import { getBoard } from \\"../../../core/microcontroller/selectBoard\\";\\n  import { onErrorMessage, onSuccess } from \\"../../../help/alerts\\";\\n  import { tooltip } from \\"@svelte-plugins/tooltips\\";\\n\\n  const navigatorSerialNotAvailableMessaeg = `To upload code you must use chrome or a chromium based browser like edge, or brave.  This will work with chrome version 89 or higher. `;\\n\\n  // controls whether the messages should autoscroll\\n  let autoScroll = false;\\n\\n  // List of messages\\n  let messages = [];\\n\\n  // This is the arduino status where it\'s open close etc\\n  let arduinoStatus = PortState.CLOSE;\\n\\n  // This is the value in the input text used to send messages to the Arduino\\n  let messageToSend = \\"\\";\\n\\n  // This is the variable storing the arduino code\\n  let code;\\n\\n  // The type of board we are using\\n  let boardType;\\n\\n  // Message Element for displaying the message\\n  let messagesEl;\\n\\n  // means that we already have seen the message\\n  let alreadyShownDebugMessage = false;\\n\\n  $: uploadingClass =\\n    arduinoStatus === PortState.UPLOADING\\n      ? \\"fa-spinner fa-spin fa-6x fa-fw\\"\\n      : \\"fa-upload\\";\\n\\n  codeStore.subscribe((codeInfo) => {\\n    code = codeInfo.code;\\n    boardType = codeInfo.boardType;\\n  });\\n\\n  arduinoStore.subscribe((status) => {\\n    arduinoStatus = status;\\n  });\\n\\n  arduionMessageStore.subscribe((newMessage) => {\\n    if (!newMessage) {\\n      return;\\n    }\\n\\n    if (newMessage.message.includes(\\"C_D_B_C_D\\")) {\\n      arduionMessageStore.sendMessage(\\"START_DEBUG\\");\\n    }\\n\\n    if (\\n      newMessage.message.includes(\\"**(|)\\") ||\\n      newMessage.message.includes(\\"DEBUG_BLOCK_\\") ||\\n      newMessage.message.includes(\\"stop_debug\\") ||\\n      newMessage.message.includes(\\"continue_debug\\") ||\\n      newMessage.message.includes(\\"START_DEBUG\\") ||\\n      newMessage.message.includes(\\"C_D_B_C_D\\")\\n    ) {\\n      return;\\n    }\\n\\n    messages = [...messages, newMessage];\\n    return;\\n  });\\n\\n  async function connectOrDisconnectArduino() {\\n    if (!navigator[\\"serial\\"]) {\\n      onErrorMessage(navigatorSerialNotAvailableMessaeg);\\n      return;\\n    }\\n\\n    if (arduinoStatus == PortState.OPEN) {\\n      arduinoStore.set(PortState.CLOSING);\\n      try {\\n        await arduionMessageStore.closePort();\\n      } catch (e) {\\n        onErrorMessage(\\n          \\"Sorry, error with the arduino.  Please refresh your browser to disconnect.\\",\\n          e\\n        );\\n      }\\n      arduinoStore.set(PortState.CLOSE);\\n      return;\\n    }\\n    arduinoStore.set(PortState.OPENNING);\\n    const board = getBoard(boardType);\\n    arduionMessageStore\\n      .connect(board.serial_baud_rate)\\n      .then(() => {\\n        arduinoStore.set(PortState.OPEN);\\n      })\\n      .catch((e) => {\\n        if (e.message.toLowerCase() === \\"no port selected by the user.\\") {\\n          arduinoStore.set(PortState.CLOSE);\\n          return;\\n        }\\n        arduinoStore.set(PortState.CLOSE);\\n        onErrorMessage(\\"Sorry, please refresh your browser and try again.\\", e);\\n      });\\n  }\\n\\n  function sendMessage() {\\n    if (arduinoStatus !== PortState.OPEN) {\\n      return;\\n    }\\n    try {\\n      arduionMessageStore.sendMessage(messageToSend);\\n      messageToSend = \\"\\";\\n    } catch (e) {\\n      console.log(e, \\"sendMessage error\\");\\n    }\\n  }\\n\\n  async function uploadCode() {\\n    if (!navigator[\\"serial\\"]) {\\n      onErrorMessage(navigatorSerialNotAvailableMessaeg);\\n      return;\\n    }\\n\\n    if (arduinoStatus !== PortState.CLOSE) {\\n      return;\\n    }\\n    arduinoStore.set(PortState.UPLOADING);\\n    try {\\n      const avrgirl = new AvrgirlArduino({\\n        board: boardType,\\n        debug: true,\\n      });\\n\\n      await upload(code, avrgirl, boardType);\\n      onSuccess(\\"Your code is uploaded!! :)\\");\\n    } catch (e) {\\n      if (e.message.toLowerCase() === \\"no port selected by the user.\\") {\\n        arduinoStore.set(PortState.CLOSE);\\n        return;\\n      }\\n      if (e.message.includes(\\"receiveData timeout after\\")) {\\n        console.log(e, \\"eating these errors.  Everything should work!\\");\\n        onSuccess(\\"Your code is uploaded!! :)\\");\\n        arduinoStore.set(PortState.CLOSE);\\n        return;\\n      }\\n      onErrorMessage(\\"Sorry, please try again in 5 minutes. :)\\", e);\\n    }\\n    arduinoStore.set(PortState.CLOSE);\\n  }\\n  function clearMessages() {\\n    messages = [];\\n  }\\n\\n  afterUpdate(() => {\\n    if (autoScroll) {\\n      messagesEl.scrollTop = messagesEl.scrollHeight;\\n    }\\n  });\\n\\n  function toggleAutoScroll() {\\n    autoScroll = !autoScroll;\\n  }\\n<\/script>\\n\\n<section bind:this={messagesEl} id=\\"messages\\">\\n  {#each messages as mes (mes.id)}\\n    <article class=\\"message-computer\\">\\n      <p>\\n        <img\\n          src={mes.type === \\"Computer\\" ? \\"./laptop.png\\" : \\"./cpu.png\\"}\\n          alt={mes.type === \\"Computer\\" ? \\"computer\\" : \\"arduino\\"}\\n        />\\n        {mes.message}\\n        ({mes.time})\\n      </p>\\n    </article>\\n  {/each}\\n</section>\\n<section id=\\"send-message-container\\">\\n  <form on:submit|preventDefault={sendMessage}>\\n    <input\\n      readonly={!(arduinoStatus === PortState.OPEN)}\\n      type=\\"text\\"\\n      bind:value={messageToSend}\\n      placeholder=\\"send message\\"\\n    />\\n  </form>\\n  <button\\n    use:tooltip\\n    title=\\"Send Message\\"\\n    disabled={!(arduinoStatus === PortState.OPEN)}\\n    on:click={sendMessage}\\n  >\\n    <i class=\\"fa fa-paper-plane\\" />\\n  </button>\\n  {#if arduinoStatus == PortState.OPEN}\\n    <button\\n      title=\\"Disconnect from Arduino\\"\\n      use:tooltip\\n      on:click={connectOrDisconnectArduino}\\n    >\\n      <i class=\\"fa\\" class:fa-eject={arduinoStatus === PortState.OPEN} />\\n    </button>\\n  {:else if arduinoStatus === PortState.CLOSE}\\n    <button\\n      title=\\"Connect to Arduino\\"\\n      use:tooltip\\n      on:click={connectOrDisconnectArduino}\\n    >\\n      <i class=\\"fa\\" class:fa-usb={arduinoStatus === PortState.CLOSE} />\\n    </button>\\n  {:else}\\n    <button>\\n      <i class=\\"fa fa-spinner fa-spin fa-6x fa-fw\\" />\\n    </button>\\n  {/if}\\n\\n  <button\\n    use:tooltip\\n    title=\\"Upload code\\"\\n    disabled={!(arduinoStatus === PortState.CLOSE)}\\n    on:click={uploadCode}\\n  >\\n    <i class=\\"fa {uploadingClass}\\" />\\n  </button>\\n  <button use:tooltip title=\\"Delete\\" on:click={clearMessages}>\\n    <i class=\\"fa fa-trash\\" />\\n  </button>\\n  <button\\n    use:tooltip\\n    title=\\"Autoscroll\\"\\n    class:scroll-active={autoScroll}\\n    on:click={toggleAutoScroll}\\n  >\\n    <i class=\\"fa fa-angle-double-down\\" />\\n  </button>\\n</section>\\n\\n<style>\\n  #messages {\\n    padding: 10px;\\n    font-size: 18px;\\n    overflow: scroll;\\n    height: calc(100% - 80px);\\n  }\\n  #messages p img {\\n    vertical-align: middle;\\n  }\\n  #send-message-container {\\n    display: flex;\\n    justify-content: space-between;\\n    width: 98%;\\n    margin: auto;\\n    height: 50px;\\n  }\\n  #send-message-container form {\\n    flex: 4;\\n  }\\n  #send-message-container input {\\n    width: 98%;\\n    margin: 5px;\\n    outline: none;\\n    border: none;\\n    font-size: 25px;\\n    height: 40px;\\n    border-bottom: 1px solid #505bda;\\n    transition: linear 1s border-bottom;\\n  }\\n  #send-message-container input:active,\\n  #send-message-container input:focus {\\n    outline: none;\\n    border-bottom: 2px solid #505bda;\\n  }\\n  #send-message-container input:read-only {\\n    cursor: not-allowed;\\n    color: #fff;\\n  }\\n  button {\\n    margin: 5px;\\n    border-radius: 2px;\\n    font-size: 20px;\\n    padding: 5px 10px;\\n    width: 50px;\\n    height: 36px;\\n    margin-top: 10px;\\n    cursor: pointer;\\n    color: black;\\n    background-color: rgb(254 244 255);\\n    border: none;\\n  }\\n  button i {\\n    transition: ease-in-out 0.4s font-size;\\n  }\\n  button:focus,\\n  button:active {\\n    outline: none;\\n  }\\n  button:active i {\\n    font-size: 18px;\\n  }\\n  button:disabled {\\n    cursor: not-allowed;\\n    background-color: rgb(255, 255, 255);\\n    color: #dce6de;\\n  }\\n  button:disabled i {\\n    font-size: 20px;\\n  }\\n  .fa-eject {\\n    color: #eb423c;\\n  }\\n  .fa-usb {\\n    color: #b063c5;\\n  }\\n  button:not(:disabled) .fa-paper-plane {\\n    color: #16bb3a;\\n  }\\n  .fa-trash {\\n    color: #16bb3a;\\n  }\\n  .scroll-active {\\n    font-size: 18px;\\n    color: #16bb3a;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAuPE,qCAAU,CACR,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAC1B,CACA,uBAAS,CAAC,CAAC,CAAC,iBAAI,CACd,cAAc,CAAE,MAClB,CACA,mDAAwB,CACtB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IACV,CACA,qCAAuB,CAAC,kBAAK,CAC3B,IAAI,CAAE,CACR,CACA,qCAAuB,CAAC,mBAAM,CAC5B,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,CACX,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,UAAU,CAAE,MAAM,CAAC,EAAE,CAAC,aACxB,CACA,qCAAuB,CAAC,mBAAK,OAAO,CACpC,qCAAuB,CAAC,mBAAK,MAAO,CAClC,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAC3B,CACA,qCAAuB,CAAC,mBAAK,UAAW,CACtC,MAAM,CAAE,WAAW,CACnB,KAAK,CAAE,IACT,CACA,kCAAO,CACL,MAAM,CAAE,GAAG,CACX,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,OAAO,CACf,KAAK,CAAE,KAAK,CACZ,gBAAgB,CAAE,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAClC,MAAM,CAAE,IACV,CACA,oBAAM,CAAC,eAAE,CACP,UAAU,CAAE,WAAW,CAAC,IAAI,CAAC,SAC/B,CACA,kCAAM,MAAM,CACZ,kCAAM,OAAQ,CACZ,OAAO,CAAE,IACX,CACA,oBAAM,OAAO,CAAC,eAAE,CACd,SAAS,CAAE,IACb,CACA,kCAAM,SAAU,CACd,MAAM,CAAE,WAAW,CACnB,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,KAAK,CAAE,OACT,CACA,oBAAM,SAAS,CAAC,eAAE,CAChB,SAAS,CAAE,IACb,CACA,qCAAU,CACR,KAAK,CAAE,OACT,CACA,mCAAQ,CACN,KAAK,CAAE,OACT,CACA,oBAAM,KAAK,SAAS,CAAC,CAAC,6BAAgB,CACpC,KAAK,CAAE,OACT,CACA,qCAAU,CACR,KAAK,CAAE,OACT,CACA,0CAAe,CACb,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OACT"}'
};
const Message = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let uploadingClass;
  let messages = [];
  let arduinoStatus = PortState.CLOSE;
  let messageToSend = "";
  let messagesEl;
  codeStore.subscribe((codeInfo) => {
    codeInfo.code;
    codeInfo.boardType;
  });
  arduinoStore.subscribe((status) => {
    arduinoStatus = status;
  });
  arduionMessageStore.subscribe((newMessage) => {
    if (!newMessage) {
      return;
    }
    if (newMessage.message.includes("C_D_B_C_D")) {
      arduionMessageStore.sendMessage("START_DEBUG");
    }
    if (newMessage.message.includes("**(|)") || newMessage.message.includes("DEBUG_BLOCK_") || newMessage.message.includes("stop_debug") || newMessage.message.includes("continue_debug") || newMessage.message.includes("START_DEBUG") || newMessage.message.includes("C_D_B_C_D")) {
      return;
    }
    messages = [...messages, newMessage];
    return;
  });
  $$result.css.add(css$1);
  uploadingClass = arduinoStatus === PortState.UPLOADING ? "fa-spinner fa-spin fa-6x fa-fw" : "fa-upload";
  return `<section id="messages" class="svelte-czu2g7"${add_attribute("this", messagesEl, 0)}>${each(messages, (mes) => {
    return `<article class="message-computer"><p><img${add_attribute("src", mes.type === "Computer" ? "./laptop.png" : "./cpu.png", 0)}${add_attribute("alt", mes.type === "Computer" ? "computer" : "arduino", 0)} class="svelte-czu2g7"> ${escape(mes.message)}
        (${escape(mes.time)})</p> </article>`;
  })}</section> <section id="send-message-container" class="svelte-czu2g7"><form class="svelte-czu2g7"><input ${!(arduinoStatus === PortState.OPEN) ? "readonly" : ""} type="text" placeholder="send message" class="svelte-czu2g7"${add_attribute("value", messageToSend, 0)}></form> <button title="Send Message" ${!(arduinoStatus === PortState.OPEN) ? "disabled" : ""} class="svelte-czu2g7"><i class="fa fa-paper-plane svelte-czu2g7"></i></button> ${arduinoStatus == PortState.OPEN ? `<button title="Disconnect from Arduino" class="svelte-czu2g7"><i class="${["fa svelte-czu2g7", arduinoStatus === PortState.OPEN ? "fa-eject" : ""].join(" ").trim()}"></i></button>` : `${arduinoStatus === PortState.CLOSE ? `<button title="Connect to Arduino" class="svelte-czu2g7"><i class="${["fa svelte-czu2g7", arduinoStatus === PortState.CLOSE ? "fa-usb" : ""].join(" ").trim()}"></i></button>` : `<button class="svelte-czu2g7" data-svelte-h="svelte-1c7tonu"><i class="fa fa-spinner fa-spin fa-6x fa-fw svelte-czu2g7"></i></button>`}`} <button title="Upload code" ${!(arduinoStatus === PortState.CLOSE) ? "disabled" : ""} class="svelte-czu2g7"><i class="${"fa " + escape(uploadingClass, true) + " svelte-czu2g7"}"></i></button> <button title="Delete" class="svelte-czu2g7" data-svelte-h="svelte-di86a3"><i class="fa fa-trash svelte-czu2g7"></i></button> <button title="Autoscroll" class="${["svelte-czu2g7", ""].join(" ").trim()}" data-svelte-h="svelte-1r5mix8"><i class="fa fa-angle-double-down svelte-czu2g7"></i></button> </section>`;
});
const css = {
  code: ".slot-wrapper.svelte-1t9h6bw{height:100%;width:100%}",
  map: '{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script lang=\\"ts\\">import VerticalComponentContainer from \\"../../components/electroblocks/VerticalComponentContainer.svelte\\";\\nimport Debug from \\"../../components/electroblocks/arduino/Debug.svelte\\";\\nimport Message from \\"../../components/electroblocks/arduino/Message.svelte\\";\\n<\/script>\\n\\n<VerticalComponentContainer>\\n  <div class=\\"slot-wrapper\\" slot=\\"top\\">\\n    <Message />\\n  </div>\\n  <div class=\\"slot-wrapper\\" slot=\\"bottom\\">\\n    <Debug />\\n  </div>\\n</VerticalComponentContainer>\\n<svelte:head>\\n  <title>ElectroBlocks - Arduino</title>\\n</svelte:head>\\n\\n<style>\\n  .slot-wrapper {\\n    height: 100%;\\n    width: 100%;\\n  }\\n</style>\\n"],"names":[],"mappings":"AAkBE,4BAAc,CACZ,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IACT"}'
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css);
  return `${validate_component(VerticalComponentContainer, "VerticalComponentContainer").$$render($$result, {}, {}, {
    bottom: () => {
      return `<div class="slot-wrapper svelte-1t9h6bw" slot="bottom">${validate_component(Debug, "Debug").$$render($$result, {}, {}, {})}</div>`;
    },
    top: () => {
      return `<div class="slot-wrapper svelte-1t9h6bw" slot="top">${validate_component(Message, "Message").$$render($$result, {}, {}, {})}</div>`;
    }
  })} ${$$result.head += `<!-- HEAD_svelte-1s918so_START -->${$$result.title = `<title>ElectroBlocks - Arduino</title>`, ""}<!-- HEAD_svelte-1s918so_END -->`, ""}`;
});
export {
  Page as default
};
